generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model absencepresence {
  Id_absencepresence Int     @id
  dateappel          String? @db.VarChar(50)
  statutappel        String? @db.VarChar(10)
}

model classe {
  Id_classe      Int     @id @default(autoincrement()) // Clé primaire
  nomclass       String? @db.VarChar(50)
  delclass       String? @db.VarChar(50)
  moniprincipal  String? @db.VarChar(50)

  utilisateur    Utilisateur? @relation(fields: [utilisateurId], references: [id]) // Relation 1-1
  utilisateurId  Int?   @unique // Clé étrangère

  enfants        enfant[] // Relation avec enfant

  @@index([utilisateurId], map: "idx_utilisateurId") // Ajout d'un index sur la clé étrangère
}



model enfant {
  Id_Enfant           Int       @id @default(autoincrement())
  nomenfant           String?   @db.VarChar(50)
  prenomenfant        String?   @db.VarChar(50)
  genre               String?   @db.VarChar(10)
  habitationenfant    String?   @db.VarChar(50)
  lieuhabitation      String?   @db.VarChar(50)
  numerotelephone     String?   @db.VarChar(50)
  emailenfant         String?   @db.VarChar(50)
  datenaissance       String?   @db.VarChar(50)
  lieunaissanceenfant String?   @db.VarChar(50)
  club                String?   @db.VarChar(50)
  dateentreed         String?   @db.VarChar(50)
  orphelinpas         String?   @db.VarChar(50)
  pere_mere           String?   @db.VarChar(50)
  Id_Mere             Int
  Id_Pere             Int
  Id_classe           Int       // Clé étrangère vers classe
  classe              classe    @relation(fields: [Id_classe], references: [Id_classe]) // Relation avec classe
  presences          presence[]

  @@index([Id_Mere], map: "Id_Mere")
  @@index([Id_Pere], map: "Id_Pere")
  @@index([Id_classe], map: "Id_classe") // Index pour la clé étrangère
}

model incription {
  Id_Incription    Int     @id @default(autoincrement())
  nomenfant        String? @db.VarChar(50)
  prenomenfant     String? @db.VarChar(50)
  classe           String? @db.VarChar(50)
  Id_classe        Int
  Id_Enfant        Int     @unique(map: "Id_Enfant")
  dateinscription  String? @db.VarChar(50)

  @@index([Id_classe], map: "Id_classe")
}

model mere {
  Id_Mere            Int     @id @default(autoincrement())
  nommere            String? @db.VarChar(50)
  prenommere         String? @db.VarChar(50)
  lieuhabitationmere String? @db.VarChar(50)
  numeromere         String? @db.VarChar(50)
  emailmere          String? @db.VarChar(50)
  professionmere     String? @db.VarChar(50)
  religionmere       String? @db.VarChar(50)
  eglisemere         String? @db.VarChar(50)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(100)
  batch     Int
}

model payement {
  Id_Payement           Int      @id @default(autoincrement())
  montant               Decimal? @db.Decimal(15, 2)
  moyenpayement         String?  @db.VarChar(50)
  totatpayement         Decimal? @db.Decimal(15, 2)
  reponsablefinancement String?  @db.VarChar(50)
  statutpayement        String?  @db.VarChar(10)
  Id_Incription         Int

  @@index([Id_Incription], map: "Id_Incription")
}

model pere {
  Id_Pere         Int     @id @default(autoincrement())
  email           String? @db.VarChar(50)
  profession      String? @db.VarChar(50)
  nompere         String? @db.VarChar(50)
  prenompere      String? @db.VarChar(50)
  lieuhabitation  String? @db.VarChar(50)
  numerotelephone String? @db.VarChar(50)
  religionpere    String? @db.VarChar(50)
  eglisepere      String? @db.VarChar(50)
}

model presence {
  Id_Presence   Int     @id @default(autoincrement())
  nomenfant     String? @db.VarChar(50)
  prenomenfant  String? @db.VarChar(50)
  classe        String? @db.VarChar(50) 
  motif         String? @db.VarChar(200)
  dateappel     String? @db.VarChar(50)
  present       String? @db.VarChar(20)
  absent        String? @db.VarChar(20)
  Id_Enfant     Int     
  Enfant        enfant @relation(fields: [Id_Enfant], references: [Id_Enfant])
  Id_Incription String? @db.VarChar(50)

  @@index([Id_Incription], map: "Id_Incription")
}

model Utilisateur {
  id        Int      @id @default(autoincrement()) // Clé primaire
  name      String
  email     String   @unique
  password  String
  prenom    String
  Actif    Boolean  @default(false)  // Par défaut, status sera false
  createdAt DateTime @default(now())
  classe       classe?  @relation // Relation 1-1 avec `classe`
}
